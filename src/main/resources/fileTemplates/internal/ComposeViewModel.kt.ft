package $PACKAGE_NAME

import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import dagger.hilt.android.lifecycle.HiltViewModel
import javax.inject.Inject
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.launch

@HiltViewModel
class ${NAME}ViewModel @Inject constructor(
    savedStateHandle: SavedStateHandle
) : ViewModel() {

    private val _eventFlow: MutableSharedFlow<${NAME}Event> = MutableSharedFlow()
    private val _stateFlow: MutableSharedFlow<${NAME}State> = MutableStateFlow(${NAME}State())
  
      val stateFlow: Flow<${NAME}State> = _stateFlow
      val eventFlow: Flow<${NAME}Event> = _eventFlow
  
  
      fun postEvent(event: ${NAME}Event) {
          viewModelScope.launch {
              _eventFlow.emit(event)
          }
      }



}